import { Readable } from 'node:stream';
import { URL } from 'node:url';
import { HttpResponseMessage } from './httpResponseMessage';
import type { HttpContext } from './interfaces';
import { BadRequestErrorMessageResult, BadRequestResult, ConflictResult, CreatedNegotiatedContentResult, ExceptionResult, InternalServerErrorResult, JsonResult, NotFoundResult, OkNegotiatedContentResult, OkResult, RedirectResult, ResponseMessageResult, StatusCodeResult, StreamResult } from './results';
export declare class BaseHttpController {
    protected readonly httpContext: HttpContext;
    protected created<T>(location: string | URL, content: T): CreatedNegotiatedContentResult<T>;
    protected conflict(): ConflictResult;
    protected ok<T>(content: T): OkNegotiatedContentResult<T>;
    protected ok(): OkResult;
    protected badRequest(): BadRequestResult;
    protected badRequest(message: string): BadRequestErrorMessageResult;
    protected internalServerError(): InternalServerErrorResult;
    protected internalServerError(error: Error): ExceptionResult;
    protected notFound(): NotFoundResult;
    protected redirect(uri: string | URL): RedirectResult;
    protected responseMessage(message: HttpResponseMessage): ResponseMessageResult;
    protected statusCode(statusCode: number): StatusCodeResult;
    protected json(content: unknown, statusCode?: number): JsonResult;
    protected stream(readableStream: Readable, contentType: string, statusCode?: number): StreamResult;
}
//# sourceMappingURL=base_http_controller.d.ts.map