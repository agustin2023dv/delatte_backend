"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-unused-vars */
const globals_1 = require("@jest/globals");
const express_1 = require("express");
const inversify_1 = require("inversify");
const supertest_1 = __importDefault(require("supertest"));
const decorators_1 = require("../../decorators");
const server_1 = require("../../server");
const utils_1 = require("../../utils");
function getDemoServer() {
    const container = new inversify_1.Container();
    let GenericController = class GenericController {
        get() {
            return { status: 'BASE GET!' };
        }
        getById(id) {
            return { status: `BASE GET BY ID! ${id}` };
        }
        post(body) {
            return {
                args: body,
                status: 'BASE POST!',
            };
        }
        put(body, id) {
            return {
                args: body,
                status: `BASE PUT! ${id}`,
            };
        }
        delete(id) {
            return { status: `BASE DELETE! ${id}` };
        }
        options(id) {
            return { status: `BASE OPTIONS! ${id}` };
        }
    };
    __decorate([
        (0, decorators_1.httpGet)('/'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], GenericController.prototype, "get", null);
    __decorate([
        (0, decorators_1.httpGet)('/:id'),
        __param(0, (0, decorators_1.requestParam)('id')),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", void 0)
    ], GenericController.prototype, "getById", null);
    __decorate([
        (0, decorators_1.httpPost)('/'),
        __param(0, (0, decorators_1.requestBody)()),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], GenericController.prototype, "post", null);
    __decorate([
        (0, decorators_1.httpPut)('/:id'),
        __param(0, (0, decorators_1.requestBody)()),
        __param(1, (0, decorators_1.requestParam)('id')),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, String]),
        __metadata("design:returntype", void 0)
    ], GenericController.prototype, "put", null);
    __decorate([
        (0, decorators_1.httpDelete)('/:id'),
        __param(0, (0, decorators_1.requestParam)('id')),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", void 0)
    ], GenericController.prototype, "delete", null);
    __decorate([
        (0, decorators_1.httpOptions)('/:id'),
        __param(0, (0, decorators_1.requestParam)('id')),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", void 0)
    ], GenericController.prototype, "options", null);
    GenericController = __decorate([
        (0, inversify_1.injectable)()
    ], GenericController);
    let MoviesController = class MoviesController extends GenericController {
        deleteActor(movieId, actorId) {
            return {
                status: `DERIVED DELETE ACTOR! MOVIECONTROLLER1 ${movieId} ${actorId}`,
            };
        }
    };
    __decorate([
        (0, decorators_1.httpDelete)('/:movieId/actors/:actorId'),
        __param(0, (0, decorators_1.requestParam)('movieId')),
        __param(1, (0, decorators_1.requestParam)('actorId')),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String]),
        __metadata("design:returntype", void 0)
    ], MoviesController.prototype, "deleteActor", null);
    MoviesController = __decorate([
        (0, decorators_1.controller)('/api/v1/movies')
    ], MoviesController);
    let MoviesController2 = class MoviesController2 extends GenericController {
        deleteActor(movieId, actorId) {
            return {
                status: `DERIVED DELETE ACTOR! MOVIECONTROLLER2 ${movieId} ${actorId}`,
            };
        }
    };
    __decorate([
        (0, decorators_1.httpDelete)('/:movieId2/actors/:actorId2'),
        __param(0, (0, decorators_1.requestParam)('movieId2')),
        __param(1, (0, decorators_1.requestParam)('actorId2')),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String]),
        __metadata("design:returntype", void 0)
    ], MoviesController2.prototype, "deleteActor", null);
    MoviesController2 = __decorate([
        (0, decorators_1.controller)('/api/v1/movies2')
    ], MoviesController2);
    let MoviesController3 = class MoviesController3 extends GenericController {
        deleteActor(movieId, actorId) {
            return {
                status: `DERIVED DELETE ACTOR! MOVIECONTROLLER3 ${movieId} ${actorId}`,
            };
        }
    };
    __decorate([
        (0, decorators_1.httpDelete)('/:movieId3/actors/:actorId3'),
        __param(0, (0, decorators_1.requestParam)('movieId3')),
        __param(1, (0, decorators_1.requestParam)('actorId3')),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String]),
        __metadata("design:returntype", void 0)
    ], MoviesController3.prototype, "deleteActor", null);
    MoviesController3 = __decorate([
        (0, decorators_1.controller)('/api/v1/movies3')
    ], MoviesController3);
    const app = new server_1.InversifyExpressServer(container);
    app.setConfig((a) => {
        a.use((0, express_1.json)());
        a.use((0, express_1.urlencoded)({ extended: true }));
    });
    const server = app.build();
    return server;
}
(0, globals_1.describe)('Derived controller', () => {
    (0, globals_1.beforeEach)(() => {
        (0, utils_1.cleanUpMetadata)();
    });
    (0, globals_1.it)('Can access methods decorated with @httpGet from parent', async () => {
        const server = getDemoServer();
        const response = await (0, supertest_1.default)(server)
            .get('/api/v1/movies')
            .expect(200);
        const body = response.body;
        (0, globals_1.expect)(body.status).toEqual('BASE GET!');
    });
    (0, globals_1.it)('Can access methods decorated with @httpGet from parent', async () => {
        const server = getDemoServer();
        const id = 5;
        const response = await (0, supertest_1.default)(server)
            .get(`/api/v1/movies/${id.toString()}`)
            .expect(200);
        const body = response.body;
        (0, globals_1.expect)(body.status).toEqual(`BASE GET BY ID! ${id.toString()}`);
    });
    (0, globals_1.it)('Can access methods decorated with @httpPost from parent', async () => {
        const server = getDemoServer();
        const movie = { name: 'The Shining' };
        const status = 'BASE POST!';
        const response = await (0, supertest_1.default)(server)
            .post('/api/v1/movies')
            .send(movie)
            .set('Content-Type', 'application/json')
            .set('Accept', 'application/json')
            .expect(200);
        const body = response.body;
        (0, globals_1.expect)(body.status).toEqual(status);
        (0, globals_1.expect)(body.args).toEqual(movie);
    });
    (0, globals_1.it)('Can access methods decorated with @httpPut from parent', async () => {
        const server = getDemoServer();
        const id = 5;
        const movie = { name: 'The Shining' };
        const response = await (0, supertest_1.default)(server)
            .put(`/api/v1/movies/${id.toString()}`)
            .send(movie)
            .set('Content-Type', 'application/json')
            .set('Accept', 'application/json')
            .expect(200);
        const body = response.body;
        (0, globals_1.expect)(body.status).toEqual(`BASE PUT! ${id.toString()}`);
        (0, globals_1.expect)(body.args).toEqual(movie);
    });
    (0, globals_1.it)('Can access methods decorated with @httpDelete from parent', async () => {
        const server = getDemoServer();
        const id = 5;
        const response = await (0, supertest_1.default)(server)
            .delete(`/api/v1/movies/${id.toString()}`)
            .expect(200);
        const body = response.body;
        (0, globals_1.expect)(body.status).toEqual(`BASE DELETE! ${id.toString()}`);
    });
    (0, globals_1.it)('Can access methods decorated with @httpOptions from parent', async () => {
        const server = getDemoServer();
        const id = 5;
        const response = await (0, supertest_1.default)(server)
            .options(`/api/v1/movies/${id.toString()}`)
            .expect(200);
        const body = response.body;
        (0, globals_1.expect)(body.status).toEqual(`BASE OPTIONS! ${id.toString()}`);
    });
    (0, globals_1.it)('Derived controller can have its own methods', async () => {
        const server = getDemoServer();
        const movieId = 5;
        const actorId = 3;
        const response = await (0, supertest_1.default)(server)
            .delete(`/api/v1/movies/${movieId.toString()}/actors/${actorId.toString()}`)
            .expect(200);
        const body = response.body;
        (0, globals_1.expect)(body.status).toEqual(`DERIVED DELETE ACTOR! MOVIECONTROLLER1 ${movieId.toString()} ${actorId.toString()}`);
    });
    (0, globals_1.it)('Derived controller 2 can have its own methods', async () => {
        const server = getDemoServer();
        const movieId = 5;
        const actorId = 3;
        const response = await (0, supertest_1.default)(server)
            .delete(`/api/v1/movies2/${movieId.toString()}/actors/${actorId.toString()}`)
            .expect(200);
        const body = response.body;
        (0, globals_1.expect)(body.status).toEqual(`DERIVED DELETE ACTOR! MOVIECONTROLLER2 ${movieId.toString()} ${actorId.toString()}`);
    });
    (0, globals_1.it)('Derived controller 3 can have its own methods', async () => {
        const server = getDemoServer();
        const movieId = 5;
        const actorId = 3;
        const response = await (0, supertest_1.default)(server)
            .delete(`/api/v1/movies3/${movieId.toString()}/actors/${actorId.toString()}`)
            .expect(200);
        const body = response.body;
        (0, globals_1.expect)(body.status).toEqual(`DERIVED DELETE ACTOR! MOVIECONTROLLER3 ${movieId.toString()} ${actorId.toString()}`);
    });
});
//# sourceMappingURL=controller_inheritance.test.js.map