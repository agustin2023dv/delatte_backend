"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getControllersFromContainer = getControllersFromContainer;
exports.getControllersFromMetadata = getControllersFromMetadata;
exports.getMiddlewareMetadata = getMiddlewareMetadata;
exports.getControllerMetadata = getControllerMetadata;
exports.getControllerMethodMetadata = getControllerMethodMetadata;
exports.getControllerParameterMetadata = getControllerParameterMetadata;
exports.cleanUpMetadata = cleanUpMetadata;
exports.instanceOfIhttpActionResult = instanceOfIhttpActionResult;
exports.getOrCreateMetadata = getOrCreateMetadata;
const constants_1 = require("./constants");
function getControllersFromContainer(container, forceControllers) {
    if (container.isBound(constants_1.TYPE.Controller)) {
        return container.getAll(constants_1.TYPE.Controller);
    }
    if (forceControllers) {
        throw new Error(constants_1.NO_CONTROLLERS_FOUND);
    }
    else {
        return [];
    }
}
function getControllersFromMetadata() {
    const arrayOfControllerMetadata = Reflect.getMetadata(constants_1.METADATA_KEY.controller, Reflect) ?? [];
    return arrayOfControllerMetadata.map((metadata) => metadata.target);
}
function getMiddlewareMetadata(constructor, key) {
    const middlewareMetadata = Reflect.getMetadata(constants_1.METADATA_KEY.middleware, constructor) ?? {};
    return middlewareMetadata[key] ?? [];
}
function getControllerMetadata(constructor) {
    const controllerMetadata = Reflect.getMetadata(constants_1.METADATA_KEY.controller, constructor);
    return controllerMetadata;
}
function getControllerMethodMetadata(constructor) {
    const methodMetadata = Reflect.getOwnMetadata(constants_1.METADATA_KEY.controllerMethod, constructor);
    const genericMetadata = Reflect.getMetadata(constants_1.METADATA_KEY.controllerMethod, Reflect.getPrototypeOf(constructor));
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    if (genericMetadata !== undefined && methodMetadata !== undefined) {
        return methodMetadata.concat(genericMetadata);
    }
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    if (genericMetadata !== undefined) {
        return genericMetadata;
    }
    return methodMetadata;
}
function getControllerParameterMetadata(constructor) {
    const parameterMetadata = Reflect.getOwnMetadata(constants_1.METADATA_KEY.controllerParameter, constructor);
    const genericMetadata = Reflect.getMetadata(constants_1.METADATA_KEY.controllerParameter, Reflect.getPrototypeOf(constructor));
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    if (genericMetadata !== undefined && parameterMetadata !== undefined) {
        return { ...parameterMetadata, ...genericMetadata };
    }
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    if (genericMetadata !== undefined) {
        return genericMetadata;
    }
    return parameterMetadata;
}
function cleanUpMetadata() {
    Reflect.defineMetadata(constants_1.METADATA_KEY.controller, [], Reflect);
}
function instanceOfIhttpActionResult(value) {
    return (value != null &&
        typeof value.executeAsync === 'function');
}
function getOrCreateMetadata(key, target, defaultValue) {
    if (!Reflect.hasMetadata(key, target)) {
        Reflect.defineMetadata(key, defaultValue, target);
        return defaultValue;
    }
    return Reflect.getMetadata(key, target);
}
//# sourceMappingURL=utils.js.map